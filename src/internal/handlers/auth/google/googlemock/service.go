// Code generated by MockGen. DO NOT EDIT.
// Source: google.go

// Package googlemock is a generated GoMock package.
package googlemock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	authtypes "questspace/internal/questspace/authservice/authtypes"
)

// MockGoogleService is a mock of GoogleService interface.
type MockGoogleService struct {
	ctrl     *gomock.Controller
	recorder *MockGoogleServiceMockRecorder
}

// MockGoogleServiceMockRecorder is the mock recorder for MockGoogleService.
type MockGoogleServiceMockRecorder struct {
	mock *MockGoogleService
}

// NewMockGoogleService creates a new mock instance.
func NewMockGoogleService(ctrl *gomock.Controller) *MockGoogleService {
	mock := &MockGoogleService{ctrl: ctrl}
	mock.recorder = &MockGoogleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoogleService) EXPECT() *MockGoogleServiceMockRecorder {
	return m.recorder
}

// GoogleOAuth mocks base method.
func (m *MockGoogleService) GoogleOAuth(arg0 context.Context, arg1 *authtypes.GoogleOAuthRequest) (authtypes.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GoogleOAuth", arg0, arg1)
	ret0, _ := ret[0].(authtypes.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GoogleOAuth indicates an expected call of GoogleOAuth.
func (mr *MockGoogleServiceMockRecorder) GoogleOAuth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GoogleOAuth", reflect.TypeOf((*MockGoogleService)(nil).GoogleOAuth), arg0, arg1)
}
