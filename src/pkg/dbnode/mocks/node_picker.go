// Code generated by MockGen. DO NOT EDIT.
// Source: node_picker.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPicker is a mock of Picker interface.
type MockPicker struct {
	ctrl     *gomock.Controller
	recorder *MockPickerMockRecorder
}

// MockPickerMockRecorder is the mock recorder for MockPicker.
type MockPickerMockRecorder struct {
	mock *MockPicker
}

// NewMockPicker creates a new mock instance.
func NewMockPicker(ctrl *gomock.Controller) *MockPicker {
	mock := &MockPicker{ctrl: ctrl}
	mock.recorder = &MockPickerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPicker) EXPECT() *MockPickerMockRecorder {
	return m.recorder
}

// AliveNode mocks base method.
func (m *MockPicker) AliveNode(arg0 context.Context) (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AliveNode", arg0)
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AliveNode indicates an expected call of AliveNode.
func (mr *MockPickerMockRecorder) AliveNode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AliveNode", reflect.TypeOf((*MockPicker)(nil).AliveNode), arg0)
}

// MasterNode mocks base method.
func (m *MockPicker) MasterNode(ctx context.Context) (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MasterNode", ctx)
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MasterNode indicates an expected call of MasterNode.
func (mr *MockPickerMockRecorder) MasterNode(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MasterNode", reflect.TypeOf((*MockPicker)(nil).MasterNode), ctx)
}

// MasterNodeTx mocks base method.
func (m *MockPicker) MasterNodeTx(ctx context.Context, opts *sql.TxOptions) (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MasterNodeTx", ctx, opts)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MasterNodeTx indicates an expected call of MasterNodeTx.
func (mr *MockPickerMockRecorder) MasterNodeTx(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MasterNodeTx", reflect.TypeOf((*MockPicker)(nil).MasterNodeTx), ctx, opts)
}
