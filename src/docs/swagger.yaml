definitions:
  auth.Response:
    properties:
      access_token:
        type: string
      user:
        $ref: '#/definitions/storage.User'
    type: object
  auth.SignInRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  game.AddPenaltyRequest:
    properties:
      penalty:
        type: integer
      team_id:
        type: string
    type: object
  game.AnswerDataResponse:
    properties:
      quest:
        $ref: '#/definitions/storage.Quest'
      task_groups:
        items:
          $ref: '#/definitions/game.AnswerTaskGroup'
        type: array
      team:
        $ref: '#/definitions/storage.Team'
    type: object
  game.AnswerTask:
    properties:
      accepted:
        type: boolean
      answer:
        type: string
      hints:
        items:
          $ref: '#/definitions/game.AnswerTaskHint'
        type: array
      id:
        type: string
      media_link:
        description: Deprecated
        example: deprecated
        type: string
      media_links:
        items:
          type: string
        type: array
      name:
        type: string
      order_idx:
        type: integer
      pub_time:
        type: string
      question:
        type: string
      reward:
        type: integer
      score:
        type: integer
      verification:
        allOf:
        - $ref: '#/definitions/storage.VerificationType'
        enum:
        - auto
        - manual
      verification_type:
        allOf:
        - $ref: '#/definitions/storage.VerificationType'
        description: Deprecated
        example: deprecated
    type: object
  game.AnswerTaskGroup:
    properties:
      id:
        type: string
      name:
        type: string
      order_idx:
        type: integer
      pub_time:
        type: string
      tasks:
        items:
          $ref: '#/definitions/game.AnswerTask'
        type: array
    type: object
  game.AnswerTaskHint:
    properties:
      taken:
        type: boolean
      text:
        type: string
    type: object
  game.LeaderboardResponse:
    properties:
      rows:
        items:
          $ref: '#/definitions/game.LeaderboardRow'
        type: array
    type: object
  game.LeaderboardRow:
    properties:
      score:
        type: integer
      team_id:
        type: string
      team_name:
        type: string
    type: object
  game.TaskResult:
    properties:
      score:
        type: integer
    type: object
  game.TeamResult:
    properties:
      penalty:
        type: integer
      taskResults:
        items:
          $ref: '#/definitions/game.TaskResult'
        type: array
      taskScore:
        type: integer
      teamID:
        type: string
      teamName:
        type: string
      totalScore:
        type: integer
    type: object
  game.TeamResults:
    properties:
      results:
        items:
          $ref: '#/definitions/game.TeamResult'
        type: array
      task_groups:
        items:
          $ref: '#/definitions/storage.TaskGroup'
        type: array
    type: object
  game.TryAnswerResponse:
    properties:
      accepted:
        type: boolean
      score:
        type: integer
      text:
        type: string
    type: object
  google.OAuthRequest:
    properties:
      id_token:
        type: string
    type: object
  play.TakeHintRequest:
    properties:
      index:
        type: integer
      task_id:
        type: string
    type: object
  play.TryAnswerRequest:
    properties:
      taskID:
        type: string
      text:
        type: string
    type: object
  quest.TeamQuestResponse:
    properties:
      leaderboard:
        $ref: '#/definitions/game.LeaderboardResponse'
      quest:
        $ref: '#/definitions/storage.Quest'
      team:
        $ref: '#/definitions/storage.Team'
    type: object
  quests.PaginatedQuestsResponse:
    properties:
      next_page_id:
        type: string
      quests:
        items:
          $ref: '#/definitions/storage.Quest'
        type: array
    type: object
  quests.Quests:
    properties:
      all:
        $ref: '#/definitions/quests.PaginatedQuestsResponse'
      owned:
        $ref: '#/definitions/quests.PaginatedQuestsResponse'
      registered:
        $ref: '#/definitions/quests.PaginatedQuestsResponse'
    type: object
  requests.CreateFullRequest:
    properties:
      task_groups:
        items:
          $ref: '#/definitions/requests.CreateRequest'
        type: array
    type: object
  requests.CreateFullResponse:
    properties:
      task_groups:
        items:
          $ref: '#/definitions/storage.TaskGroup'
        type: array
    type: object
  requests.CreateRequest:
    properties:
      name:
        type: string
      pub_time:
        type: string
      tasks:
        items:
          $ref: '#/definitions/requests.CreateTaskRequest'
        type: array
    type: object
  requests.CreateTaskRequest:
    properties:
      correct_answers:
        items:
          type: string
        type: array
      hints:
        items:
          maxLength: 3
          type: string
        type: array
      media_link:
        description: Deprecated
        example: deprecated
        type: string
      media_links:
        items:
          type: string
        type: array
      name:
        type: string
      pub_time:
        type: string
      question:
        type: string
      reward:
        type: integer
      verification:
        allOf:
        - $ref: '#/definitions/storage.VerificationType'
        enum:
        - auto
        - manual
    type: object
  storage.AccessType:
    enum:
    - public
    - link_only
    type: string
    x-enum-varnames:
    - AccessPublic
    - AccessLinkOnly
  storage.CreateQuestRequest:
    properties:
      access:
        $ref: '#/definitions/storage.AccessType'
      brief:
        type: string
      description:
        type: string
      finish_time:
        example: "2024-04-21T14:00:00+05:00"
        type: string
      has_brief:
        type: boolean
      max_team_cap:
        type: integer
      media_link:
        type: string
      name:
        type: string
      registration_deadline:
        example: "2024-04-14T12:00:00+05:00"
        type: string
      start_time:
        example: "2024-04-14T14:00:00+05:00"
        type: string
    type: object
  storage.CreateTaskGroupRequest:
    properties:
      name:
        type: string
      order_idx:
        type: integer
      pub_time:
        type: string
      tasks:
        items:
          $ref: '#/definitions/storage.CreateTaskRequest'
        type: array
    type: object
  storage.CreateTaskRequest:
    properties:
      correct_answers:
        items:
          type: string
        type: array
      group_id:
        type: string
      hints:
        items:
          type: string
        type: array
      media_link:
        description: Deprecated
        example: deprecated
        type: string
      media_links:
        items:
          type: string
        type: array
      name:
        type: string
      order_idx:
        type: integer
      pub_time:
        type: string
      question:
        type: string
      reward:
        type: integer
      verification:
        $ref: '#/definitions/storage.VerificationType'
    type: object
  storage.CreateUserRequest:
    properties:
      avatar_url:
        example: https://api.dicebear.com/7.x/thumbs/svg
        type: string
      password:
        example: "12345"
        type: string
      username:
        example: svayp11
        type: string
    type: object
  storage.DeleteTaskGroupRequest:
    properties:
      id:
        type: string
    type: object
  storage.DeleteTaskRequest:
    properties:
      id:
        type: string
    type: object
  storage.Hint:
    properties:
      index:
        type: integer
      text:
        type: string
    type: object
  storage.Quest:
    properties:
      access:
        $ref: '#/definitions/storage.AccessType'
      brief:
        type: string
      creator:
        $ref: '#/definitions/storage.User'
      description:
        type: string
      finish_time:
        example: "2024-04-21T14:00:00+05:00"
        type: string
      has_brief:
        type: boolean
      id:
        type: string
      max_team_cap:
        type: integer
      media_link:
        type: string
      name:
        type: string
      registration_deadline:
        example: "2024-04-14T12:00:00+05:00"
        type: string
      start_time:
        example: "2024-04-14T14:00:00+05:00"
        type: string
      status:
        enum:
        - ON_REGISTRATION
        - REGISTRATION_DONE
        - RUNNING
        - WAIT_RESULTS
        - FINISHED
        type: string
    type: object
  storage.Task:
    properties:
      correct_answers:
        items:
          type: string
        type: array
      hints:
        items:
          type: string
        type: array
      id:
        type: string
      media_link:
        description: Deprecated
        example: deprecated
        type: string
      media_links:
        items:
          type: string
        type: array
      name:
        type: string
      order_idx:
        type: integer
      pub_time:
        type: string
      question:
        type: string
      reward:
        type: integer
      verification_type:
        allOf:
        - $ref: '#/definitions/storage.VerificationType'
        enum:
        - auto
        - manual
    type: object
  storage.TaskGroup:
    properties:
      id:
        type: string
      name:
        type: string
      order_idx:
        type: integer
      pub_time:
        type: string
      tasks:
        items:
          $ref: '#/definitions/storage.Task'
        type: array
    type: object
  storage.TaskGroupsBulkUpdateRequest:
    properties:
      create:
        items:
          $ref: '#/definitions/storage.CreateTaskGroupRequest'
        type: array
      delete:
        items:
          $ref: '#/definitions/storage.DeleteTaskGroupRequest'
        type: array
      update:
        items:
          $ref: '#/definitions/storage.UpdateTaskGroupRequest'
        type: array
    type: object
  storage.TasksBulkUpdateRequest:
    properties:
      create:
        items:
          $ref: '#/definitions/storage.CreateTaskRequest'
        type: array
      delete:
        items:
          $ref: '#/definitions/storage.DeleteTaskRequest'
        type: array
      update:
        items:
          $ref: '#/definitions/storage.UpdateTaskRequest'
        type: array
    type: object
  storage.Team:
    properties:
      captain:
        $ref: '#/definitions/storage.User'
      id:
        type: string
      invite_link:
        type: string
      members:
        items:
          $ref: '#/definitions/storage.User'
        type: array
      name:
        type: string
      score:
        type: integer
    type: object
  storage.UpdateQuestRequest:
    properties:
      access:
        $ref: '#/definitions/storage.AccessType'
      brief:
        type: string
      description:
        type: string
      finish_time:
        type: string
      has_brief:
        type: boolean
      max_team_cap:
        type: integer
      media_link:
        type: string
      name:
        type: string
      registration_deadline:
        type: string
      start_time:
        type: string
    type: object
  storage.UpdateTaskGroupRequest:
    properties:
      id:
        type: string
      name:
        type: string
      order_idx:
        type: integer
      pub_time:
        type: string
      tasks:
        $ref: '#/definitions/storage.TasksBulkUpdateRequest'
    type: object
  storage.UpdateTaskRequest:
    properties:
      correct_answers:
        items:
          type: string
        type: array
      group_id:
        type: string
      hints:
        items:
          type: string
        type: array
      id:
        type: string
      media_link:
        description: Deprecated
        example: deprecated
        type: string
      media_links:
        items:
          type: string
        type: array
      name:
        type: string
      order_idx:
        type: integer
      pub_time:
        type: string
      question:
        type: string
      reward:
        type: integer
      verification:
        $ref: '#/definitions/storage.VerificationType'
    type: object
  storage.User:
    properties:
      avatar_url:
        type: string
      id:
        type: string
      username:
        type: string
    type: object
  storage.VerificationType:
    enum:
    - auto
    - manual
    type: string
    x-enum-varnames:
    - VerificationAuto
    - VerificationManual
  taskgroups.GetResponse:
    properties:
      quest:
        $ref: '#/definitions/storage.Quest'
      task_groups:
        items:
          $ref: '#/definitions/storage.TaskGroup'
        type: array
    type: object
  teams.ChangeLeaderRequest:
    properties:
      new_captain_id:
        type: string
    type: object
  teams.CreateRequest:
    properties:
      name:
        type: string
    type: object
  teams.UpdateRequest:
    properties:
      name:
        type: string
    type: object
  user.UpdatePasswordRequest:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    type: object
  user.UpdatePublicDataRequest:
    properties:
      avatar_url:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /auth/google:
    post:
      parameters:
      - description: Google OAuth request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/google.OAuthRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.Response'
        "400":
          description: Bad Request
      summary: Register new or sign in old user using Google OAuth2.0
      tags:
      - Auth
  /auth/register:
    post:
      parameters:
      - description: Create user request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateUserRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.Response'
        "400":
          description: Bad Request
        "415":
          description: Unsupported Media Type
      summary: Register new user and return auth data
      tags:
      - Auth
  /auth/sign-in:
    post:
      parameters:
      - description: Sign in request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.SignInRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.Response'
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Sign in to user account and return auth data
      tags:
      - Auth
  /quest:
    get:
      parameters:
      - collectionFormat: csv
        description: Fields to return
        in: query
        items:
          enum:
          - all
          - registered
          - owned
          type: string
        maxLength: 3
        minLength: 0
        name: fields
        type: array
      - default: 50
        description: Number of quests to return for each field
        in: query
        name: page_size
        type: integer
      - description: Page ID to return. Mutually exclusive to multiple fields
        in: query
        name: page_id
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/quests.Quests'
        "400":
          description: Bad Request
      security:
      - ApiKeyAuth: []
      summary: Get many quests sorted by start time and finished status
      tags:
      - Quests
    post:
      parameters:
      - description: Main quest information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.CreateQuestRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/storage.Quest'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "415":
          description: Unsupported Media Type
      security:
      - ApiKeyAuth: []
      summary: Create new quest
      tags:
      - Quests
  /quest/{id}/answer:
    post:
      parameters:
      - description: Quest ID
        in: path
        name: quest_id
        required: true
        type: string
      - description: Answer data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/play.TryAnswerRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/game.TryAnswerResponse'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "406":
          description: Not Acceptable
      security:
      - ApiKeyAuth: []
      summary: Answer task in play-mode
      tags:
      - PlayMode
  /quest/{id}/hint:
    post:
      parameters:
      - description: Quest ID
        in: path
        name: quest_id
        required: true
        type: string
      - description: Take hint request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/play.TakeHintRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/storage.Hint'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "406":
          description: Not Acceptable
      security:
      - ApiKeyAuth: []
      summary: Take hint for task in play-mode
      tags:
      - PlayMode
  /quest/{id}/leaderboard:
    get:
      parameters:
      - description: Quest ID
        in: path
        name: quest_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/game.LeaderboardResponse'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get leaderboard table with final results
      tags:
      - PlayMode
  /quest/{id}/penalty:
    post:
      parameters:
      - description: Quest ID
        in: path
        name: quest_id
        required: true
        type: string
      - description: Data to set penalty
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/game.AddPenaltyRequest'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "406":
          description: Not Acceptable
      security:
      - ApiKeyAuth: []
      summary: Add penalty to team
      tags:
      - PlayMode
  /quest/{id}/play:
    get:
      parameters:
      - description: Quest ID
        in: path
        name: quest_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/game.AnswerDataResponse'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "406":
          description: Not Acceptable
      security:
      - ApiKeyAuth: []
      summary: Get task groups with tasks for play-mode
      tags:
      - PlayMode
  /quest/{id}/table:
    get:
      parameters:
      - description: Quest ID
        in: path
        name: quest_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/game.TeamResults'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
      - ApiKeyAuth: []
      summary: Get admin leaderboard table during quest
      tags:
      - PlayMode
  /quest/{id}/task-groups:
    get:
      parameters:
      - description: Quest ID
        in: path
        name: quest_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/taskgroups.GetResponse'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "406":
          description: Not Acceptable
      security:
      - ApiKeyAuth: []
      summary: Get task groups with tasks for quest creator
      tags:
      - TaskGroups
    post:
      parameters:
      - description: Quest ID
        in: path
        name: quest_id
        required: true
        type: string
      - description: All task groups with inner tasks to create
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.CreateFullRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/requests.CreateFullResponse'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
      - ApiKeyAuth: []
      summary: '[Deprecated] Create task groups and tasks. All previously created
        task groups and tasks would be deleted and overridden.'
      tags:
      - TaskGroups
  /quest/{id}/task-groups/bulk:
    patch:
      parameters:
      - description: Requests to delete/create/update task groups
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.TaskGroupsBulkUpdateRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/requests.CreateFullResponse'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - ApiKeyAuth: []
      summary: Patch task groups by creating new ones, delete, update and reorder
        all ones. Returns all exising task groups.
      tags:
      - TaskGroups
  /quest/{quest_id}:
    delete:
      parameters:
      - description: Quest ID
        in: path
        name: quest_id
        required: true
        type: string
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
      - ApiKeyAuth: []
      summary: Delete quest
      tags:
      - Quests
    get:
      parameters:
      - description: Quest ID
        in: path
        name: quest_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/quest.TeamQuestResponse'
        "404":
          description: Not Found
      security:
      - ApiKeyAuth: []
      summary: Get quest by id
      tags:
      - Quests
    post:
      parameters:
      - description: Quest ID
        in: path
        name: quest_id
        required: true
        type: string
      - description: Quest information to update
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/storage.UpdateQuestRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/storage.Quest'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "415":
          description: Unsupported Media Type
      security:
      - ApiKeyAuth: []
      summary: Update main quest information
      tags:
      - Quests
  /quest/{quest_id}/finish:
    post:
      parameters:
      - description: Quest ID
        in: path
        name: quest_id
        required: true
        type: string
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
      - ApiKeyAuth: []
      summary: Finish quest
      tags:
      - Quests
  /quest/{quest_id}/teams:
    get:
      parameters:
      - description: Quest id
        in: path
        name: quest_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/storage.Team'
            type: array
        "400":
          description: Bad Request
      summary: Get all teams by quest id
      tags:
      - Teams
    post:
      parameters:
      - description: Quest ID
        in: path
        name: quest_id
        required: true
        type: string
      - description: Desired team information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/teams.CreateRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/storage.Team'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "406":
          description: Not Acceptable
      security:
      - ApiKeyAuth: []
      summary: Create new team
      tags:
      - Teams
  /teams/{team_id}:
    post:
      parameters:
      - description: Team id
        in: path
        name: team_id
        required: true
        type: string
      - description: New information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/teams.UpdateRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/storage.Team'
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
      - ApiKeyAuth: []
      summary: Change team information
      tags:
      - Teams
  /teams/all/{team_id}:
    delete:
      parameters:
      - description: Team id
        in: path
        name: team_id
        required: true
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
      - ApiKeyAuth: []
      summary: Delete team by id
      tags:
      - Teams
    get:
      parameters:
      - description: Team id
        in: path
        name: team_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/storage.Team'
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Get team by id
      tags:
      - Teams
  /teams/all/{team_id}/{member_id}:
    delete:
      parameters:
      - description: Team id
        in: path
        name: team_id
        required: true
        type: string
      - description: Member id
        in: path
        name: member_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/storage.Team'
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
      - ApiKeyAuth: []
      summary: Remove member from team
      tags:
      - Teams
  /teams/all/{team_id}/captain:
    post:
      parameters:
      - description: Team id
        in: path
        name: team_id
        required: true
        type: string
      - description: Change captain request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/teams.ChangeLeaderRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/storage.Team'
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
      - ApiKeyAuth: []
      summary: Change team captain
      tags:
      - Teams
  /teams/all/{team_id}/leave:
    post:
      parameters:
      - description: Team id
        in: path
        name: team_id
        required: true
        type: string
      - description: New captain (if leader leaves)
        in: query
        name: new_captain
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/storage.Team'
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
      - ApiKeyAuth: []
      summary: Leave the team
      tags:
      - Teams
  /teams/join/{invite_path}:
    get:
      parameters:
      - description: Team invite url param
        in: path
        name: invite_path
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/storage.Team'
        "401":
          description: Unauthorized
        "406":
          description: Not Acceptable
      security:
      - ApiKeyAuth: []
      summary: Join team
      tags:
      - Teams
  /teams/join/{invite_path}/quest:
    get:
      parameters:
      - description: Team invite path
        in: path
        name: invite_path
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/quest.TeamQuestResponse'
        "404":
          description: Not Found
      security:
      - ApiKeyAuth: []
      summary: Get quest by its team invite path
      tags:
      - Teams
  /user/{user_id}:
    delete:
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
      - ApiKeyAuth: []
      summary: Delete user account
      tags:
      - Users
    get:
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/storage.User'
        "404":
          description: Not Found
      summary: Get user by id
      tags:
      - Users
    post:
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Public data to set for user
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.UpdatePublicDataRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.Response'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "422":
          description: Unprocessable Entity
      security:
      - ApiKeyAuth: []
      summary: Update user public data such as username or avatar and returns new
        auth data
      tags:
      - Users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
